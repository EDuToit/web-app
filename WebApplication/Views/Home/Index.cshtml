@{
    ViewData["Title"] = "Home Page";
}

<app asp-prerender-module="ClientApp/dist/main-server">Loading...</app>

<script
    src="https://code.jquery.com/jquery-3.3.1.min.js"
    integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="
    crossorigin="anonymous"></script>
<script src="Scripts/mapper-api.js"></script>
<script src="~/dist/vendor.js" asp-append-version="true"></script>

@section scripts {
    <script src="~/dist/main-client.js" asp-append-version="true"></script>
    <script>

        var map;
        var drag = true;
        var path;
        var polygon = [];
        var multiPolygons = [];
        var poly;
        var addedPolygons = [];

        var url;

        function initMap() {
            map = new google.maps.Map(document.getElementById('map'),
                {
                    zoom: 20,
                    center: { lat: -25.658712, lng: 28.140347 },
                    mapTypeId: 'satellite',
                    panControl: false
                });
            poly = defaultPolygon(); 
            poly.setMap(map);
            map.addListener('click', addLatLng);

            getServerURL();
            setupAPI();
        }

        function getServerURL() {
            url = prompt("Enter server URL:", "localhost:5001");
            api.url = url;
        }

        function setupAPI() {
            // Clicking on 'Save Course' all saveCourse() and send 
            // the current Polygons on the map to the API to save
            $("#saveCourse").on("click", 
                function() {
                    
                    saveCourse($("#courseId").val());
                }
            );

            // Clicking on 'Load Course' will call getCourse() and init
            // the Map with Polygons from the returned data of the API
            $("#loadCourse").on("click", 
                function() {
                    api.getPolygons($("#courseId").val(),
                        getCourse
                    );
                }
            );

            // Clicking on 'Create Course' will create a course, and return
            // the courseId.
            $("#createCourse").on("click",
                function() {
                    api.createCourse($("#courseName").val(),
                        function(result) {
                            if (result == null || 
                                typeof result == "undefined") {

                                error("Failed to create course -> " +
                                "courseName: " + $("#courseName").val());
                            } else {
                                success("Course created -> courseId: " + 
                                result.courseId);
                            }
                        }

                    );
                }
            );
        };

        function error(e) {
            console.log("Error: " + e);
        }

        function success(s) {
            console.log("Success: " + s);
        }

        function notify(n) {
            console.log("Notification:\n" + n);
        }

        function saveCourse(_courseId) {
            if (multiPolygons.length == 0) {
                error("Failed to save course -> No polygons drawn on the map");
                return;
            }
            for (var i = 0; i < multiPolygons.length; ++i) {
                tempPolys = multiPolygons[i];
                geoJson = 
                {
                    "type": "Polygon",
                    "coordinates": [[]]
                };

                var polygonLngLat  = [];
                polygonLngLat = tempPolys.getPath().getArray();

                for (var j = 0; j < polygonLngLat.length; ++j) {
                    geoJson["coordinates"][0].push([polygonLngLat[j].lng(), 
                        polygonLngLat[j].lat()]);
                }
                geoJson["coordinates"][0].push([polygonLngLat[0].lng(),
                    polygonLngLat[0].lat()]);
                
                var stringifyGeoJson = JSON.stringify(geoJson);
                api.addPolygon(_courseId, stringifyGeoJson, 
                    multiPolygons[i].terrainType, 
                    function (data) {
                        if (data == null || typeof data == "undefined") {
                            error("Failed to add Polygon "+i+" to course.");
                        } else {
                            success("Polygon "+i+" was added to the course.");
                        }
                    }
                );
            }
        }

        function getCourse(data) {
            if (data == null || typeof data == 'undefined') {
                error("Failed to load course. Data error from API");
                return;
            } else {
                resetMap();
                multiPolygons = [];
            }

            for (var i = 0; i < data.length; ++i) {
                var dataCoords = data[i].polygon.coordinates[0];
                var polyCoords = [];

                for (var j = 0; j < dataCoords.length; ++j) {
                    polyCoords.push(new google.maps.LatLng(dataCoords[j][1], 
                        dataCoords[j][0]));
                }

                var temp = createPolygon(false, data[i].type);
                temp.setOptions({ paths: polyCoords });
                temp.setMap(map);

                multiPolygons.push(temp);
            }
            poly.setMap(null);

            poly = createPolygon(true, 0); 
            poly.setMap(map);

            success("Polygons added to the drawable map.");
        }

        function getColor(data) {
            switch (data) {
                case 0: return '#463E3E';
                case 1: return '#73A15D';
                case 2: return '#BADA55';
                case 3: return '#C2B280';
                case 4: return '#336699';
            }
        }

        function addLatLng(event) {
            // Because getPath() return an MVCArray, we can simply append a new 
            // coordinate and it will automatically appear.
            poly.getPath().push(event.latLng);
            polygon.push(event.latLng);
        }

        function newPolygon() {
            poly.setOptions({ editable: false, draggable: false, 
                clickable: false });
            if (poly.getPath().length >= 3) {
                multiPolygons.push(poly);
                polygon = [];
            } else {
                poly.setMap(null);
                error("Failed to save Polygon -> " + 
                    "atleast 3 coordinates are needed!");
            }

            poly = defaultPolygon();
            poly.setMap(map);

            var courseTypeSelector = document.getElementById("courseType");
            courseTypeSelector.selectedIndex = 0;
        }

        function toggleDraggable() {
            drag = !drag;
            map.setOptions({ draggable: drag });
        }

        function showAllCoordinates() {
            var display = "";
            var temp = "";
            for (var i = 0; i < multiPolygons.length; i++) {
                display += "index: " + i + " " + multiPolygons[i] + '\n\n';
            }
            if (polygon.length !== 0) {
                for (var j = 0; j < polygon.length; j++) {
                    temp += polygon[j] + ",";
                }
                display += "index: " + i + " " + temp + '\n\n';
            }
            notify(display);
        }

        function showCurrentCoordinate() {
            var display = "";
            for (var i = 0; i < polygon.length; i++) {
                display += "index: " + i + " " + polygon[i] + '\n';
            }
            notify(display);
        }

        function changePolyType() {
            var courseTypeSelector = document.getElementById("courseType");
            var colour = getColor(courseTypeSelector.selectedIndex);

            poly.setOptions({
                strokeColor: colour,
                fillColor: colour,
                zIndex: courseTypeSelector.selectedIndex,
                terrainType: courseTypeSelector.selectedIndex
            });
        }

        function defaultPolygon() {
            return createPolygon(true, 0);
        }

        function createPolygon(ableFeatures, ttype) {
            return new google.maps.Polygon({
                strokeOpacity: 1,
                strokeWeight: 5,
                fillOpacity: 0.4,
                strokeColor: getColor(ttype),
                fillColor: getColor(ttype),
                draggable: ableFeatures,
                editable: ableFeatures,
                clickable: ableFeatures,
                terrainType: ttype,
                zIndex: ttype
            });
        }

        function resetMap() {
            if (multiPolygons != []) {
                for (var i = 0; i < multiPolygons.length; ++i) {
                    multiPolygons[i].setMap(null);
                }
            }
            multiPolygons = [];
            if (poly == null || typeof poly == 'undefined') {
                poly = defaultPolygon();
            }
            poly.setMap(null);
            poly = null;
            poly = defaultPolygon();
            poly.setMap(map);
        }
    </script>
    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBnbeKYeCMSTPhkws7du0gvv_eSEp02Kog&callback=initMap">
    </script>
}
